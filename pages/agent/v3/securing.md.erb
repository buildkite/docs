# Securing your Buildkite Agent

In cases where a Buildkite Agent is being deployed into a sensitive environment there are a few default settings and techniques which may be adjusted.

{:toc}

## Securely storing secrets

For best practices and recommendations about secret storage in the Agent, see the [Managing Secrets](/docs/pipelines/secrets) guide.  

## Disabling automatic ssh-keyscan

By default the agent will automatically accept the Git SSH host using the `ssh-keyscan` command when doing the first checkout on a new agent host. The agent runs a similar command to this:

```bash
ssh-keyscan "<host>" >> "~/.ssh/known_hosts"
```

If you choose to disable this functionality, you'll need to manually perform your first checkout, or ensure the SSH fingerprint of your source code host is already present on your build machine.

This operation can be disabled by setting `no-ssh-keyscan` in one of the following ways:

* Environment variable: `BUILDKITE_NO_SSH_KEYSCAN=true`
* Command line flag: `--no-ssh-keyscan`
* Configuration setting: `no-ssh-keyscan=true`

## Disabling command eval

By default the agent allows you to run any command on the build server (e.g. `make test`). You can disable command evaluation and allow only the execution of scripts (with no ability to pass command line flags). Disabling command evaluation will also disable plugin execution.

Once disabled your build steps will need to be checked into your repository as scripts, and the only way to pass arguments is via environment variables.

To disable command line evaluation use one of the following settings:

* Environment variable: `BUILDKITE_NO_COMMAND_EVAL=1`
* Command line flag: `--no-command-eval`
* Configuration setting: `no-command-eval=true`

<div class="Docs__troubleshooting-note">
  <h3>Custom hooks</h3>
  <p>If you have a custom 'command' hook, using <code>no-command-eval</code> will have no effect on your command execution. See <a href="#allowing-a-list-of-plugins">Allowing a List of Plugins</a> and <a href="#customizing-the-bootstrap">Custom bootstrap scripts</a> for examples of how to completely lock down your agent from arbitrary code execution.</p>
</div>

## Disabling plugins

As plugins execute in the same way as local hooks, they can pose a potential security risk. If you're using third party plugins, you'll be executing the third party's code on your agent.

You can disable plugins with the command line flag: `--no-plugins`.  

If you still would like to use plugins, a third-party tool for signing pipelines will help you do it securely. See [Signing pipelines](https://buildkite.com/docs/agent/v3/securing#signing-pipelines) for more information.  

## Disabling local hooks

If you have configured your agent to do very specific things with global hooks (i.e. run commands within a Docker container or a chroot environment), you probably don't want them overridden with local ones. Disabling local hooks will also disable plugins.

You can disable local hooks with the command line flag: `--no-local-hooks`.

## Strict checks using agent hooks

You can use the [agent’s environment hook](hooks) to add strict checks for what repositories, commands, and plugins are allowed to run. The environment hook will be run before any source code is checked out onto the machine, and before any commands are executed.

For example, the following environment hook allows only a single file from a single repository to be executed on the agent machine:

```bash
#!/bin/bash
set -euo pipefail

if [[ "${BUILDKITE_REPO}" != "git@server:repo.git" ]]; then
  echo "Repository not allowed: ${BUILDKITE_REPO}"
  exit 1
fi

if [[ "${BUILDKITE_COMMAND}" != "some-script.sh" ]]; then
  echo "Command not allowed: ${BUILDKITE_COMMAND}"
  exit 1
fi
```

## Signing pipelines  

<section class="Docs__troubleshooting-note">
  <p>Please remember that for maximum security it’s not recommended to use plugins.</p>
</section>

Suppose using plugins is crucial to your workflow, but you would still like to preserve strong security guarantees. In that case, you can use a third-party tool [buildkite-signed-pipeline](https://github.com/seek-oss/buildkite-signed-pipeline). It adds extra security guarantees around Buildkite’s jobs by allowing the uploaded steps to be signed with a secret shared by all agents. As a result, plugins can run without concerns of tampering by third parties. 

## Allowing a list of plugins

Using the [agent’s environment hook](hooks), you can create a list of plugins that an agent is allowed to run using the `BUILDKITE_PLUGINS` [environment variable](https://buildkite.com/docs/pipelines/environment-variables). For example of how to do this, see the [buildkite/buildkite-allowed-plugins-hook-example](https://github.com/buildkite/buildkite-allowed-plugins-hook-example) repository on GitHub.

## Customizing the bootstrap

The Buildkite Agent comes with a default bootstrap script, but can be [configured](/docs/agent/v3/configuration) to run your own. Providing your own bootstrap provides the highest level of security and control of your agent machine. You can use it to customize your agent, sanitize command output, and implement your own security logic.

The Buildkite Agent is separated into a daemon executable and a bootstrap executable. The daemon is responsible for communicating with the Buildkite API and executing the bootstrap. The bootstrap is responsible for checking out source code, calling hooks, running commands, and uploading build artifacts. The bootstrap is passed environment variables by the daemon process, and has its output streams and exit status captured.

For example, the following custom bootstrap will print out the environment variables passed by the main agent process, print a hello world, and exit with a failure status:

```bash
#!/bin/bash
set -euo pipefail

env

echo "Hello world"

exit 1
```

## Forcing clean checkouts

By default Buildkite will reuse (after cleaning) a previous checkout. This may not be safe if building commits from untrusted sources (e.g. 3rd party pull requests). To force a clean checkout every time, set `BUILDKITE_CLEAN_CHECKOUT=true` in the environment.

## Disallowing hooks in the repository

The default bootstrap script will execute hooks from the agent configuration (global) and the repository (local). Running local hooks may be undesirable if you are building commits from untrusted sources (e.g. 3rd party pull requests).

Local hooks can be disabled by setting `BUILDKITE_NO_LOCAL_HOOKS=true` in the environment.

If local hooks are disabled and one is in the checkout, the job will fail.

NOTE: If building untrusted commits, you should also contain the build scripts and anything else that may be influenced by the repository contents within chroots, containers, VMs, etc as is appropriate for your needs.

## Running the Agent behind a proxy

To run the agent behind a proxy, you'll need to export the following proxy environment variables for your process manager:

* `http_proxy`
* `https_proxy`

Both of these variables should be set to the URL for your proxy server.

For example, if using systemd, create a directory named `/etc/systemd/system/buildkite-agent.service.d` that contains a `proxy.conf` file. 

An example systemd `proxy.conf` file:

```
[Service]
# Proxy Env Vars
Environment=http_proxy=http://username:password@proxyserver:8080/
Environment=https_proxy=http://username:password@proxyserver:8080/
```
{: codeblock-file="proxy.conf"}

After creating this file, systemd will require a reload and the `buildkite-agent` service will require a restart. 

## Restricting access by the Buildkite agent controller
 
To safeguard your organization's infrastructure in case of Buildkite infrastructure being compromised, you want to restrict what the agent can and cannot do. All of the information above about securing the Buildkite agent applies, specifically:

* Disallow execution of arbitrary commands by [customizing the list of allowed plugins](#allowing-a-list-of-plugins) or [disabling plugins](#disabling-plugins) entirely
* [Disable command-eval](#disabling-command-eval)  
* [Disable local hooks](#disabling-local-hooks)  
* [Enable strict validation in agent hooks](#strict-checks-using-agent-hooks)  
 
As a result, your Buildkite agent will refuse to run anything that's not a single argumentless invocation of a script that exists locally (after the `git clone` step of the setup) unless it's explicitly allowed by you. 
Since the [agent](https://github.com/buildkite/agent) is open-source, if necessary you can verify that assertion to whatever degree of certainty is required.  
