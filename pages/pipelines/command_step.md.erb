# Command Step

A command step runs one or more shell commands on one or more agents.

{:toc}

Each command step can run either a shell command like `npm test`, or an executable file or script like `build.sh`.

A command step can be defined in your pipeline settings, or in your [pipeline.yml](/docs/pipelines/defining-steps) file.

```yml
steps:
  - command: "tests.sh"
```
{: codeblock-file="pipeline.yml"}

When running multiple commands, either defined in a single line (`npm install && tests.sh`) or defined in a list, any failure will prevent subsequent commands from running, and will mark the command step as failed.

## Command step attributes

_Required attributes:_

<table data-attributes data-attributes-required>
  <tr>
    <td><code>command</code></td>
    <td>
      The shell command/s to run during this step. This can be a single line of commands, or a list of commands that must all pass. Also available as the alias <code>commands</code>.<br>
      <em>Example:</em> <code>"build.sh"</code><br>
      <em>Example:</em><br><code>- "npm install"</code><br><code>- "tests.sh"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - commands:
    - "npm install && npm test"
    - "moretests.sh"
    - "build.sh"
```
{: codeblock-file="pipeline.yml"}

<div class="Docs__note">
  <h3 class="Docs__note__heading">Pipelines without command steps</h3>
  <p>Although the <code>command</code> attribute is required for a command step, some <a href="/docs/plugins/using#adding-a-plugin-to-your-pipeline">plugins</a> work without a command step, so it isn't strictly necessary for your pipeline to have an explicit command step.</p>
</div>

_Optional attributes:_

<table data-attributes>
  <tr>
    <td><code>agents</code></td>
    <td>
      A map of <a href="/docs/agent/v3/cli-start#setting-tags">agent tag</a> keys to values to <a href="/docs/agent/v3/cli-start#agent-targeting">target specific agents</a> for this step. <br>
      <em>Example:</em> <code>npm: "true"</code>
    </td>
  </tr>
  <tr>
    <td><code>allow_dependency_failure</code></td>
    <td>
      Whether to continue to run this step if any of the steps named in the <code>depends_on</code> attribute fail.<br>
      <em>Default:</em> <code>false</code>
    </td>
  </tr>
  <tr>
    <td><code>artifact_paths</code></td>
    <td>
      The <a href="/docs/agent/v3/cli-artifact#uploading-artifacts">glob path</a> or paths of <a href="/docs/agent/v3/cli-artifact">artifacts</a> to upload from this step. This can be a single line of paths separated by semicolons, or a list.<br>
      <em>Example:</em> <code>"logs/**/*;coverage/**/*"</code><br>
      <em>Example:</em><br><code>- "logs/**/*"</code><br><code>- "coverage/**/*"</code>
    </td>
  </tr>
  <tr>
    <td><code>branches</code></td>
    <td>
      The <a href="/docs/pipelines/branch-configuration#branch-pattern-examples">branch pattern</a> defining which branches will include this step in their builds.<br>
      <em>Example:</em> <code>"main stable/*"</code>
    </td>
  </tr>
  <tr>
    <td><code>concurrency</code></td>
    <td>
      The <a href="/docs/pipelines/controlling-concurrency#concurrency-limits">maximum number of jobs</a> created from this step that are allowed to run at the same time. If you use this attribute, you must also define a label for it with the <code>concurrency_group</code> attribute.<br>
      <em>Example:</em> <code>3</code>
    </td>
  </tr>
  <tr>
    <td><code>concurrency_group</code></td>
    <td>
      A unique name for the concurrency group that you are creating with the <code>concurrency</code> attribute.<br>
      <em>Example:</em> <code>"my-app/deploy"</code>
    </td>
  </tr>
  <tr>
    <td><code>depends_on</code></td>
    <td>
      A list of step keys that this step depends on. This step will only run after the named steps have completed. See <a href="/docs/pipelines/dependencies">managing step dependencies</a> for more information.<br>
      <em>Example:</em> <code>"test-suite"</code>
    </td>
  </tr>
  <tr>
    <td><code>env</code></td>
    <td>
      A map of <a href="/docs/pipelines/environment-variables">environment variables</a> for this step.<br>
      <em>Example:</em> <code>RAILS_ENV: "test"</code>
    </td>
  </tr>
  <tr>
    <td><code>if</code></td>
    <td>
      A boolean expression that omits the step when false. See <a href="/docs/pipelines/conditionals">Using conditionals</a> for supported expressions.<br>
      <em>Example:</em> <code>build.message != "skip me"</code>
    </td>
  </tr>
  <tr>
    <td><code>key</code></td>
    <td>
      A unique string to identify the step. The value is available in the <code>BUILDKITE_STEP_KEY</code> <a href="/docs/pipelines/environment-variables">environment variable</a>.<br>
      Keys can not have the same pattern as a UUID (<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>).<br>
      <em>Example:</em> <code>"linter"</code>
      <em>Alias:</em> <code>identifier</code>
    </td>
  </tr>
  <tr>
    <td><code>label</code></td>
    <td>
      The label that will be displayed in the pipeline visualisation in Buildkite. Supports emoji.<br>
      <em>Example:</em> <code>"\:hammer\: Tests" will be rendered as "ðŸ”¨: Tests"</code><br></code><br>
    </td>
  </tr>
  <tr>
    <td><code>parallelism</code></td>
    <td>
      The number of <a href="/docs/tutorials/parallel-builds#parallel-jobs">parallel jobs</a> that will be created based on this step. <br>
      <em>Example:</em> <code>3</code>
    </td>
  </tr>
  <tr>
    <td><code>plugins</code></td>
    <td>
      An array of <a href="/docs/plugins">plugins</a> for this step.<br>
      <em>Example:</em><br>
      <code>- docker-compose#v1.0.0:<br>
&nbsp;&nbsp;&nbsp;&nbsp;run: app</code>
    </td>
  </tr>
  <tr>
    <td><code>priority</code></td>
    <td>
      Adjust the <a href="/docs/pipelines/managing-priorities">priority</a> for a specific job, as a positive or negative integer.<br>
      <em>Example:</em><br>
      <code>- command: "will-run-first.sh"<br>&nbsp;&nbsp;priority: 1</code>
    </td>
  </tr>
  <tr>
    <td><code>retry</code></td>
    <td>
      The conditions for retrying this step.<br>
      Available types: <code>automatic</code>, <code>manual</code>
    </td>
  </tr>
  <tr>
    <td><code>skip</code></td>
    <td>
      Whether to skip this step or not. Passing a string provides a reason for skipping this command. Passing an empty string is equivalent to <code>false</code>.
      Note: Skipped steps will be hidden in the pipeline view by default, but can be made visible by toggling the 'Skipped jobs' icon.<br>
      <em>Example:</em> <code>true</code><br>
      <em>Example:</em> <code>false</code><br>
      <em>Example:</em> <code>"My reason"</code>
    </td>
  </tr>
  <tr>
    <td><code>soft_fail</code></td>
    <td>
      Allow specified non-zero exit statuses not to fail the build.
      Can be either an array of allowed soft failure exit statuses or <code>true</code> to make all exit statuses soft-fail.<br>
      <em>Example:</em> <code>true</code><br>
      <em>Example:</em><br>
      <code>- exit_status: 1</code><br>
    </td>
  </tr>
  <tr>
    <td><code>timeout_in_minutes</code></td>
    <td>
      The maximum number of minutes a job created from this step is allowed to run. If the job exceeds this time limit, or if it finishes with a non-zero exit status, the job is automatically canceled and the build fails. Jobs that time out with an exit status of 0 are marked as "passed".<br>
      <em>Example:</em> <code>60</code>
    </td>
  </tr>
</table>

## Retry attributes

_At least one of the following attributes is required:_

<table>
  <tr>
    <td><code>automatic</code></td>
    <td>
      Whether to allow a job to retry automatically. This field accepts a boolean value, individual retry conditions, or a list of multiple different retry conditions.<br> If set to <code>true</code>, the retry conditions are set to the default value.<br>
      <em>Default value:</em><br>
      <code>exit_status: "*"</code><br>
      <code>limit: 2</code><br>
      <em>Example:</em> <code>true</code>
    </td>
  </tr>
  <tr>
    <td><code>manual</code></td>
    <td>
      Whether to allow a job to be retried manually. This field accepts a boolean value, or a single retry condition.<br>
      <em>Default value:</em> <code>true</code><br>
      <em>Example:</em> <code>false</code>
    </td>
  </tr>
</table>

```yml
steps:
  - label: "Tests"
    command: "tests.sh"
    retry:
      automatic: true

  - wait

  - label: "Deploy"
    command: "deploy.sh"
    retry:
      manual: false
```
{: codeblock-file="pipeline.yml"}


## Automatic retry attributes

_Optional Attributes_

<table>
  <tr>
    <td><code>exit_status</code></td>
    <td>
      The exit status number that will cause this job to retry ('*' does not include 0) <br>
      <em>Example:</em> <code>"*"</code><br>
      <em>Example:</em> <code>2</code>
    </td>
  </tr>
  <tr>
    <td><code>limit</code></td>
    <td>
      The number of times this job can be retried. The maximum value this can be set to is 10.<br>
      <em>Example:</em> <code>3</code>
    </td>
  </tr>
</table>

<div class="Docs__note">
<h3 class="Docs__note__heading">-1 Exit Status</h3>
<p>A job will fail with an exit status of -1 if communication with the agent has been lost (for example, the agent has been forcefully terminated, or the agent machine was shut down without allowing the agent to disconnect). See the section on <a href="/docs/agent/v3#exit-codes">Exit Codes</a> for information on other exit codes.</p>
</div>

```yml
steps:
  - label: "Tests"
    command: "tests.sh"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
        - exit_status: 255 # Forced agent shutdown
          limit: 2
```
{: codeblock-file="pipeline.yml"}

## Manual retry attributes

_Optional Attributes_

<table>
  <tr>
    <td><code>allowed</code></td>
    <td>
      A boolean value that defines whether or not this job can be retried manually.<br>
      <em>Default value:</em> <code>true</code><br>
      <em>Example:</em> <code>false</code>
    </td>
  </tr>
  <tr>
    <td><code>permit_on_passed</code></td>
    <td>
      A boolean value that defines whether or not this job can be retried after it has passed.<br>
      <em>Example:</em> <code>false</code>
    </td>
  </tr>
  <tr>
    <td><code>reason</code></td>
    <td>
      A string that will be displayed in a tooltip on the Retry button in Buildkite. This will only be displayed if the <code>allowed</code> attribute is set to false.<br>
      <em>Example:</em> <code>"No retries allowed on deploy steps"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - label: "Tests"
    command: "tests.sh"
    retry:
      manual:
        permit_on_passed: true

  - wait

  - label: "Deploy"
    command: "deploy.sh"
    retry:
      manual:
        allowed: false
        reason: "Sorry, you can't retry a deployment"
```
{: codeblock-file="pipeline.yml"}

## Soft fail attributes


_Optional Attributes_

<table>
  <tr>
    <td><code>exit_status</code></td>
    <td>
      Allow specified non-zero exit statuses not to fail the build.
      <br>
      <em>Example:</em> <code>"*"</code><br>
      <em>Example:</em> <code>1</code>
    </td>
  </tr>
</table>

```yml
steps:
  - label: "Everyone struggles sometimes"
    command: "tests.sh"
    soft_fail:
      - exit_status: 1
```
{: codeblock-file="pipeline.yml"}

## Examples

```yml
steps:
  - label: "\:hammer\: Tests"
    commands:
      - "npm install"
      - "npm run tests"
    branches: "main"
    env:
      NODE_ENV: "test"
    agents:
      npm: "true"
      queue: "tests"
    artifact_paths:
      - "logs/**/*"
      - "coverage/**/*"
    parallelism: 5
    timeout_in_minutes: 3
    retry:
      automatic:
        - exit_status: -1
          limit: 2
        - exit_status: 143
          limit: 2
        - exit_status: 255
          limit: 2

  - label: "Visual diff"
    commands:
      - "npm install"
      - "npm run visual-diff"
    retry:
      automatic:
        limit: 3

  - label: "Skipped job"
    command: "broken.sh"
    skip: "Currently broken and needs to be fixed"

  - wait

  - label: "\:shipit\: Deploy"
    command: "deploy.sh"
    branches: "main"
    concurrency: 1
    concurrency_group: "my-app/deploy"
    retry:
      manual:
        allowed: false
        reason: "Sorry, you can't retry a deployment"

  - wait

  - label: "Smoke test"
    command: "smoke-test.sh"
    soft_fail:
      - exit_status: 1
```
{: codeblock-file="pipeline.yml"}
