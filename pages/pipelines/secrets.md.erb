# Managing Pipeline Secrets

When you need to use secret values in your pipelines, there are some best practices you should follow to ensure they stay safely within your infrastructure and are never stored in, or sent to, Buildkite.

{:toc}

## Using a secrets storage service

A best practice for secret storage is to use your own secrets storage service, such as [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/) or [Hashicorp Vault](https://www.vaultproject.io).

There are also various [Buildkite Plugins](/docs/plugins) that integrate reading
and exposing secrets to your build steps using secrets storage services.

## Storing secrets in environment hooks

If you don’t use a secrets storage service, the recommended place to store
secrets is in an [`environment` hook](/docs/agent/v3/hooks#job-lifecycle-hooks).
[Agent hooks](/docs/agent/v3/hooks#hook-locations-agent-hooks) are stored on
your agent machine, are only accessible by you, and can conditionally expose
secrets to your pipeline steps.

For example, say you had the following deploy [`command` step](/docs/pipelines/command-step) in a pipeline:

```yml
steps:
  - command: scripts/trigger-github-deploy
    key: trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

This step runs the `scripts/trigger-github-deploy` script from the repository, and creates a GitHub Deployment using a [GitHub personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line). The script has the following source code:

```bash
#!/bin/bash
set -euo pipefail

curl \
  --header "Authorization: token $GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
  --request POST \
  --data "{\"ref\": \"$BUILDKITE_COMMIT\"}" \
  https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="scripts/trigger-github-deploy"}

To set up the `GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN` secret for the step, you
could define an [`environment` hook](/docs/agent/v3/hooks#job-lifecycle-hooks)
in your [agent `hooks-path` directory](/docs/agent/v3/hooks#hook-locations-agent-hooks)
to conditionally export it. For example:

```bash
#!/bin/bash
set -euo pipefail

if [[ "$BUILDKITE_PIPELINE_SLUG" == "my-app" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == "trigger-github-deploy" ]]; then
    export GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN="bd0fa963610b..."
  fi
fi
```
{: codeblock-file="hooks/environment"}

<section class="Docs__note">
  <p>Adding conditional checks, such as the pipeline slug and the step identifier, helps to limit accidental use and disclosure of secrets.</p>
</section>

## Storing secrets with the Elastic CI Stack for AWS

To store secrets when using the [Elastic CI Stack for AWS](https://github.com/buildkite/elastic-ci-stack-for-aws), place them inside your stack’s encrypted S3 bucket.
Unlike hooks defined in [agent `hooks-path`](/docs/agent/v3/hooks#hook-locations-agent-hooks),
the Elastic CI Stack’s `env` hooks are defined per-pipeline.

For example, to expose a `GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN` environment
variable to a step with identifier `trigger-github-deploy`, you would create the
following `env` file on your local development machine:

```bash
#!/bin/bash
set -euo pipefail

if [[ "$BUILDKITE_STEP_KEY" == "trigger-github-deploy" ]]; then
  export GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN="bd0fa963610b..."
fi
```
{: codeblock-file="env"}

You then upload the `env` file, encrypted, into the secrets S3 bucket with the
following command:

```bash
# Upload the env
aws s3 cp --acl private --sse aws:kms env "s3://elastic-ci-stack-my-stack-secrets-bucket/my-app/env"
# Remove the original file
rm env
```

See the [Elastic CI Stack for AWS](https://github.com/buildkite/elastic-ci-stack-for-aws) readme for more information and examples.

## Anti-pattern: Storing secrets in your pipeline settings

You should never store secrets on your Buildkite Pipeline Settings page. Not only does this expose the secret value to Buildkite, but pipeline settings are often returned in REST and GraphQL API payloads.

<section class="Docs__note">
  <p>Never store secret values in your Buildkite pipeline settings.</p>
</section>

## Anti-pattern: Storing secrets in your pipeline.yml

You should never store secrets in the `env` block at the top of your pipeline steps, whether it's in a `pipeline.yml` file or the YAML steps editor. 

```yml
env:
  # Security risk! The secret will be sent to and stored by Buildkite, and
  # be available in the "Uploaded Pipelines" list in the job’s Timeline tab.
  GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN: "bd0fa963610b..."

steps:
  - command: scripts/trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

<section class="Docs__note">
  <p>Never store secrets in the <code>env</code> section of your pipeline.</p>
</section>

## Anti-pattern: Referencing secrets in your pipeline YAML

You should never refer to secrets directly in your `pipeline.yml` file, as they may be interpolated during the [pipeline upload](/docs/agent/v3/cli-pipeline#uploading-pipelines) and sent to Buildkite. For example:

```yaml
steps:
  # Security risk! The environment variable containing the secret will be
  # interpolated into the YAML file and then sent to Buildkite.
  - command: |
      curl \
        --header "Authorization: token $GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
        --request POST \
        --data "{\"ref\": \"$BUILDKITE_COMMIT\"}" \
        https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="pipeline.yml"}

Referencing secrets in your steps risks them being interpolated, uploaded to Buildkite, and shown in plain text in the "Uploaded Pipelines" list in the job’s Timeline tab.

The Buildkite agent does [redact strings](/docs/pipelines/managing-log-output#redacted-environment-variables) that match the values off of environment variables whose names match common password patterns such as `*_PASSWORD`, `*_SECRET` and `*_TOKEN`.

To prevent the risk of interpolation, it is recommended that you replace the command block with a script in your repository, for example:

```yml
steps:
  - command: scripts/trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

<section class="Docs__note">
  <p>Use <a href="/docs/pipelines/writing-build-scripts">build scripts</a> instead of <code>command</code> blocks for steps that use secrets.</p>
</section>

If you must define your script in your steps, you can prevent interpolation by using the `$$` syntax:

```yml
steps:
  # By using $$ the value of the secret is never sent to Buildkite. This is
  # still not best practice, as it's easy to forget the additional $ character
  # and expose the secret.
  - command: |
      curl \
        --header "Authorization: token $$GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
        --request POST \
        --data "{\"ref\": \"$$BUILDKITE_COMMIT\"}" \
        https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="pipeline.yml"}
