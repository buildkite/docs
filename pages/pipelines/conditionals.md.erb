# Using Conditionals

Using conditionals, you can run builds or steps only when specific conditions are met. Define boolean conditions using C-like expressions. Note that you cannot use [Build Meta-data](/docs/pipelines/build-meta-data) in conditional expressions.

You can define conditionals at the step level in your `pipeline.yml` or at the pipeline level in your Buildkite version control provider settings.

{:toc}

## Conditionals in Pipelines

Define conditionals in the _Pipeline Settings_ for your repository provider to run builds only when expressions evaluate to `true`. For example, to run only when a branch is tagged `Approved`:

<%= image "conditionals.png", width: 864, height: 298, alt: "Conditional Filtering settings" %>

Conditionals are supported in [Bitbucket](/docs/integrations/bitbucket), [Bitbucket Server](/docs/integrations/bitbucket-server), [GitHub](/docs/integrations/github), [GitHub Enterprise](/docs/integrations/github-enterprise) and [GitLab](/docs/integrations/gitlab) (including GitLab Community and GitLab Enterprise).

## Conditionals in Steps

Use the `if` attribute in your step definition to conditionally run a step.

In the below example, the `tests` step will only be run if the build message does not contain the string "skip tests".

```yml
steps:
	- command: ./scripts/tests.sh
	  label: tests
	  if: build.message !~ /skip tests/
```
{: codeblock-file="pipeline.yml"}

The `if` attribute can be used in any type of step, and with any of the supported expressions and parameters. However, it cannot be used at the same time as the `branches` attribute.

Be careful when defining conditionals within YAML. Many symbols have special meaning in YAML and will change the type of a value. You can avoid this by quoting your conditional as a string.

```yml
steps:
	- command: ./scripts/tests.sh
	  label: tests
	  if: "!build.pull_request.draft"
```
{: codeblock-file="pipeline.yml"}

Multi-line conditionals can be added with the `|` character, and avoid the need for quotes:

```yml
steps:
    - command: ./scripts/tests.sh
      label: tests
      if: |
      	// Don't when the message contains "skip tests"
      	// Only run on feature branches
        build.message !~ /skip tests/ &&
          build.branch =~ /^feature\//
```
{: codeblock-file="pipeline.yml"}

## Supported syntax

The below expressions are supported by the `if` attribute:

 <table>
 	<tbody>
 		<tr>
 			<td>Comparators</td>
 			<td><code>== != =~ !~</code></td>
 		</tr>
 		<tr>
 			<td>Logical operators</td>
 			<td><code>|| &&</code></td>
 		</tr>
 		<tr>
 			<td>Array operators</td>
 			<td><code>includes</code></td>
 		</tr>
 		<tr>
 			<td>Integers</td>
 			<td><code>12345</code></td>
 		</tr>
 		<tr>
 			<td>Strings</td>
 			<td><code>'feature-branch' "feature-branch"</code></td>
 		</tr>
		<tr>
			<td>Literals</td>
 			<td><code>true false null</code></td>
 		</tr>
 		<tr>
 			<td>Parentheses</td>
 			<td><code>( )</code></td>
 		</tr>
 		<tr>
 			<td>Regular expressions</td>
 			<td><code>/^v1\.0/</code></td>
 		</tr>
 		<tr>
 			<td>Prefixes</td>
 			<td><code>!</code></td>
 		</tr>
 		<tr>
 			<td>Comments</td>
 			<td><code>// This is a comment</code></td>
 		</tr>
 	</tbody>
 </table>



<div class="Docs__troubleshooting-note">
  <h3>Formatting regular expressions</h3>
  <p>When using regular expressions in conditionals, the regular expression must be on the right hand side, and the use of the <code>$</code> anchor symbol must be escaped to avoid <a href="/docs/agent/v3/cli-pipeline#environment-variable-substitution">environment variable substitution</a>. For example, to match branches ending in <code>"/feature"</code> the conditional statement would be <code>build.branch =~ /\/feature$$/</code>.
</div>

## Conditional Notifications

To trigger [Build notifications](/docs/pipelines/notifications#conditional-notifications) only under certain conditions, use  the same `if` syntax as in your [Steps](/docs/pipelines/conditionals#conditionals-in-steps).

For example, the following email notification will only be triggered if the build passes:

```yaml
notify:
  - email: "dev@acmeinc.com"
    if: build.state == "passed"
```
{: codeblock-file="pipeline.yml"}

## Supported variables

The below variables are supported by the `if` attribute:

<table>
<tbody>
	<tr>
		<td><code>build.author.email</code></td>
		<td><code>String</code></td>
		<td>The email address of the user who authored the build's commit</td>
	</tr>
	<tr>
		<td><code>build.author.id</code></td>
		<td><code>String</code></td>
		<td>The ID of the user who authored the build's commit</td>
	</tr>
	<tr>
		<td><code>build.author.name</code></td>
		<td><code>String</code></td>
		<td>The name of the user who authored the build's commit</td>
	</tr>
	<tr>
		<td><code>build.author.teams</code></td>
		<td><code>Array</code></td>
		<td>An array of the team/s which the user who authored the build's commit is a member of</td>
	</tr>
	<tr>
		<td><code>build.branch</code></td>
		<td><code>String</code></td>
		<td>The branch on which this build is created from</td>
	</tr>
	<tr>
		<td><code>build.commit</code></td>
		<td><code>String</code></td>
		<td>The commit number of the commit the current build is based on</td>
	</tr>
	<tr>
		<td><code>build.creator.email</code></td>
		<td><code>String</code></td>
		<td>The email of the user who created the build</td>
	</tr>
	<tr>
		<td><code>build.creator.id</code></td>
		<td><code>String</code></td>
		<td>The ID of the user who created the build</td>
	</tr>
	<tr>
		<td><code>build.creator.name</code></td>
		<td><code>String</code></td>
		<td>The name of the user who created the build</td>
	</tr>
	<tr>
		<td><code>build.creator.teams</code></td>
		<td><code>Array</code></td>
		<td>An array of the team/s which the user who created the build is a member of</td>
	</tr>
	<tr>
		<td><code>build.env()</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>This function returns the value of the environment passed as the first argument, otherwise <code>null</code> if the environment variable has not been set</td>
	</tr>
	<tr>
		<td><code>build.id</code></td>
		<td width="20%"><code>String</code></td>
		<td>The ID of the current build</td>
	</tr>
	<tr>
		<td><code>build.message</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>The current build's message</td>
	</tr>
	<tr>
		<td><code>build.number</code></td>
		<td><code>Integer</code></td>
		<td>The number of the current build</td>
	</tr>
	<tr>
		<td><code>build.pull_request.base_branch</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>The base branch that the pull request is targeting, otherwise <code>null</code> if the branch is not a pull request</td>
	</tr>
	<tr>
		<td><code>build.pull_request.id</code></td>
		<td><code>String</code>, <code>null</code></td>
 		<td>The number of the pull request, otherwise <code>null</code> if the branch is not a pull request</td>
	</tr>
	<tr>
		<td><code>build.pull_request.draft</code></td>
		<td><code>Boolean</code>, <code>null</code></td>
		<td>If the pull request is a draft, otherwise <code>null</code> if the branch is not a pull request or the provider doesn't support draft pull requests</td>
	</tr>
	<tr>
		<td><code>build.pull_request.labels</code></td>
		<td><code>Array</code></td>
		<td>An array of label names attached to the pull request</td>
	</tr>
	<tr>
		<td><code>build.pull_request.repository</code></td>
		<td><code>String</code>, <code>null</code></td>
 		<td>The repository URL of the pull request, otherwise <code>null</code> if the branch is not a pull request</td>
	</tr>
	<tr>
		<td><code>build.pull_request.repository.fork</code></td>
		<td><code>Boolean</code>, <code>null</code></td>
		<td>If the pull request comes from a forked repository, otherwise <code>null</code> if the branch is not a pull request</td>
	</tr>
	<tr>
		<td><code>build.source</code></td>
		<td><code>String</code></td>
		<td>The source of the event that created the build<br><em>Available sources:</em> <code>ui</code>, <code>api</code>, <code>webhook</code>, <code>trigger_job</code>, <code>schedule</code></td>
	</tr>
	<tr>
		<td><code>build.state</code></td>
		<td><code>String</code></td>
		<td>The state the current build is in<br><em>Available states:</em> <code> scheduled</code>, <code> running</code>, <code> passed</code>, <code> failed</code>, <code> blocked</code>, <code> canceling</code>, <code> canceled</code>, <code> skipped</code>, <code> not_run</code>, <code> finished</code></td>
	</tr>
	<tr>
		<td><code>build.tag</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>The tag associated with the commit the current build is based on</td>
	</tr>
	<tr>
		<td><code>pipeline.default_branch</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>The default branch of the pipeline the current build is from</td>
	</tr>
	<tr>
		<td><code>pipeline.id</code></td>
		<td><code>String</code></td>
		<td>The ID of the pipeline the current build is from</td>
	</tr>
	<tr>
		<td><code>pipeline.repository</code></td>
		<td><code>String</code>, <code>null</code></td>
		<td>The repository of the pipeline the current build is from</td>
	</tr>
	<tr>
		<td><code>pipeline.slug</code></td>
		<td><code>String</code></td>
		<td>The slug of the pipeline the current build is from</td>
	</tr>
	<tr>
		<td><code>organization.id</code></td>
		<td><code>String</code></td>
		<td>The ID of the organization the current build is running in</td>
	</tr>
	<tr>
		<td><code>organization.slug</code></td>
		<td><code>String</code></td>
		<td>The slug of the organization the current build is running in</td>
	</tr>
</tbody>
</table>

<div class="Docs__troubleshooting-note">
<h3>Using <code>build.env()</code> with custom environment variables</h3>
<p>To access custom environment variables with the <code>build.env()</code> function, ensure that the <a href="https://buildkite.com/changelog/32-defining-pipeline-build-steps-with-yaml">YAML pipeline steps editor</a> has been enabled in the Pipeline Settings menu.</p>
</div>

## Conditionals and the broken state

Jobs become `broken` when their configuration prevents them from running. This might be because their [branch configuration](/docs/pipelines/branch-configuration) doesn't match the build's branch, or because a conditional returned false. This is distinct from `skipped` jobs, which might happen if a newer build is started and build skipping is enabled. Broadly, jobs break because of something inside the build, and are skipped by something outside the build.

## Example expressions

To run only when the branch is `master` or `production`:

```js
build.branch == "master" || build.branch == "production"
```

To run only when the branch is not `production`:

```js
build.branch != "production"
```

To run only when the branch starts with `features/`:

```js
build.branch =~ /^features\//
```

To run only when the branch ends with `/release-123`, such as `feature/release-123`:

```js
build.branch =~ /\/release-123\$/
```

To run only when building a tag:

```js
build.tag != null
```

To run only when building a tag beginning with a `v` and ends with a `.0`, such as `v1.0`:

```js
// Using the tag variable
build.tag =~ /^v[0-9]+\.0\$/

// Using the env function
build.env("BUILDKITE_TAG") =~ /^v[0-9]+\.0\$/
```

To run only if the message doesn't contain `[skip tests]`, case insensitive:

```js
build.message !~ /\[skip tests\]/i
```

To run only if the build was created from a schedule:

```js
build.source == "schedule"
```

To run when the value of `CUSTOM_ENVIRONMENT_VARIABLE` is `value`:

```js
build.env("CUSTOM_ENVIRONMENT_VARIABLE") == "value"
```

To run when the build creator is in the `deploy` team:

```js
build.creator.teams includes "deploy"
```

To run only non-draft pull requests:

```js
!build.pull_request.draft
```
