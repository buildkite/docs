# Environment Variables

When the agent invokes your build scripts it passes in a set of standard Buildkite environment variables, along with any that you've defined in your build configuration. You can use these environment variables in your [build steps](/docs/pipelines/defining-steps) and [agent hooks](/docs/agent/v3/hooks).

<%= toc %>

## Standard Buildkite environment variables

The following environment variables are automatically provided to every job, and are read only. They can’t be overridden by your pipeline configuration or environment hooks.

<table>
<tbody>
  <tr>
    <th><code>BUILDKITE</code></th>
    <td>Always <code>"true"</code>.</td>
  </tr>
  <tr>
    <th><code>BUILDKITE_AGENT_NAME</code></th>
    <td>Name of the agent running the job. <p class="Docs__api-param-eg"><em>Example:</em> <code>"my-agent-1"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_ARTIFACT_PATHS</code></th>
    <td>The <a href="/docs/builds/artifacts">artifact paths</a> to upload after the job, if any have been specified. <p class="Docs__api-param-eg"><em>Example:</em> <code>"tmp/capybara/**/*;coverage/**/*"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BRANCH</code></th>
    <td>The branch being built. <p class="Docs__api-param-eg"><em>Example:</em> <code>"master"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_CHECKOUT_PATH</code></th>
    <td>The path where the agent has checked out your code for this build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"/var/lib/buildkite-agent/builds/agent-1/pipeline-2"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_CREATOR</code></th>
    <td>The name of the user who created the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"Tracy Tester"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_CREATOR_EMAIL</code></th>
    <td>The notification email of the user who created the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"tracy@acme-inc.com"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_CREATOR_TEAMS</code></th>
    <td>A colon separated list of non-private team names that the build creator belongs to. <p class="Docs__api-param-eg"><em>Example:</em> <code>"everyone:platform"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_ID</code></th>
    <td>The UUID of the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"4735ba57-80d0-46e2-8fa0-b28223a86586"</code></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_NUMBER</code></th>
    <td>The build number. This number increases by 1 with every build, and is guaranteed to be unique within each pipeline. <p class="Docs__api-param-eg"><em>Example:</em> <code>"1514"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_BUILD_URL</code></th>
    <td>The url for this build on Buildkite. <p class="Docs__api-param-eg"><em>Example:</em> <code>"https://buildkite.com/acme-inc/my-project/builds/1514"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_CLEAN_CHECKOUT</code></th>
    <td>Whether the build should perform a clean checkout. <p class="Docs__api-param-eg"><em>Example:</em> <code>"true"</code> or <code>"false"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_COMMAND</code></th>
    <td>The command that will be run for the job. <p class="Docs__api-param-eg"><em>Example:</em> <code>"script/buildkite/specs"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_COMMIT</code></th>
    <td>The commit of the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"83a20ec058e2fb00e7fa4558c4c6e81e2dcf253d"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_DISABLE_GIT_SUBMODULES</code></th>
    <td>When set to <code>true</code> prevents fetching of any git submodules during checkout. This variable is used by the <code>buildkite-agent</code> bootstrap script. <p class="Docs__api-param-eg"><em>Example:</em> <code>"true"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_GITHUB_DEPLOYMENT_ID</code></th>
    <td>When triggered by a <a href="https://developer.github.com/v3/repos/deployments/">GitHub Deployment</a>, the deployment identifier. <p class="Docs__api-param-eg"><em>Example:</em> <code>"87972451"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_GITHUB_DEPLOYMENT_TASK</code></th>
    <td>When triggered by a <a href="https://developer.github.com/v3/repos/deployments/">GitHub Deployment</a>, the name of the deployment task. <p class="Docs__api-param-eg"><em>Example:</em> <code>"deploy"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_GITHUB_DEPLOYMENT_ENVIRONMENT</code></th>
    <td>When triggered by a <a href="https://developer.github.com/v3/repos/deployments/">GitHub Deployment</a>, the name of the deployment environment. <p class="Docs__api-param-eg"><em>Example:</em> <code>"production"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_GITHUB_DEPLOYMENT_PAYLOAD</code></th>
    <td>When triggered by a <a href="https://developer.github.com/v3/repos/deployments/">GitHub Deployment</a>, the deployment payload data as serialized JSON. <p class="Docs__api-param-eg"><em>Example:</em> <code>"{\"rolling_restart\":true}"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_JOB_ID</code></th>
    <td>Internal UUID Buildkite uses for this job. <p class="Docs__api-param-eg"><em>Example:</em> <code>"e44f9784-e20e-4b93-a21d-f41fd5869db9"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_LABEL</code></th>
    <td>The label/name of the current job. <p class="Docs__api-param-eg"><em>Example:</em> <code>"\:hammer\: Specs"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_MESSAGE</code></th>
    <td>The message associated with the build, usually the commit message. <p class="Docs__api-param-eg"><em>Example:</em> <code>"Added a great new feature"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_NO_LOCAL_HOOKS</code></th>
    <td>Whether local hooks in the repository are allowed. <p class="Docs__api-param-eg"><em>Example:</em> <code>"true"</code> or <code>"false"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_ORGANIZATION_SLUG</code></th>
    <td>The organization name on Buildkite as used in URLs. <p class="Docs__api-param-eg"><em>Example:</em> <code>"acme-inc"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PIPELINE_DEFAULT_BRANCH</code></th>
    <td>The default branch for this pipeline. <p class="Docs__api-param-eg"><em>Example:</em> <code>"master"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PIPELINE_PROVIDER</code></th>
    <td>The ID of the source code provider for the pipeline’s repository. <p class="Docs__api-param-eg"><em>Example:</em> <code>"github"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PIPELINE_SLUG</code></th>
    <td>The pipeline slug on Buildkite as used in URLs. <p class="Docs__api-param-eg"><em>Example:</em> <code>"my-project"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PULL_REQUEST</code></th>
    <td>The number of the pull request if this branch is a pull request. <p class="Docs__api-param-eg"><em>Example:</em> <code>"123"</code> for pull request #123, or <code>"false"</code> if not a pull request.</p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PULL_REQUEST_BASE_BRANCH</code></th>
    <td>The base branch that the pull request is targeting. <p class="Docs__api-param-eg"><em>Example:</em> <code>"master"</code>, or <code>""</code> if not a pull request.</p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_PULL_REQUEST_REPO</code></th>
    <td>The repository URL of the pull request. <p class="Docs__api-param-eg"><em>Example:</em> <code>"git://github.com/acme-inc/my-project.git"</code>, or <code>""</code> if not a pull request.</p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_REBUILT_FROM_BUILD_ID</code></th>
    <td>The UUID of the original build this was rebuilt from. <p class="Docs__api-param-eg"><em>Example:</em> <code>"4735ba57-80d0-46e2-8fa0-b28223a86586"</code>, or <code>""</code> if not a rebuild.</p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_REBUILT_FROM_BUILD_NUMBER</code></th>
    <td>The UUID of the original build this was rebuilt from. <p class="Docs__api-param-eg"><em>Example:</em> <code>"1514"</code>, or <code>""</code> if not a rebuild.</p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_REPO</code></th>
    <td>The repository of your pipeline. <p class="Docs__api-param-eg"><em>Example:</em> <code>"git@github.com:acme-inc/my-project.git"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_REFSPEC</code></th>
    <td>A custom refspec for the <code>buildkite-agent</code> bootstrap script to use when checking out code. <p class="Docs__api-param-eg"><em>Example:</em> <code>"+refs/weird/123abc:refs/local/weird/456"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_SOURCE</code></th>
    <td>The source of the event that created the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"webhook"</code>, <code>"api"</code>, <code>"ui"</code>, <code>"trigger_job"</code>, or <code>"schedule"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_TAG</code></th>
    <td>The name of the tag being built, if this build was triggered from a tag. <p class="Docs__api-param-eg"><em>Example:</em> <code>"v1.2.3"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_TIMEOUT</code></th>
    <td>The number of minutes until Buildkite automatically cancels this job, if a timeout has been specified. <p class="Docs__api-param-eg"><em>Example:</em> <code>"15"</code> for 15 minutes, or <code>"false"</code> if no timeout is set</td>
  </tr>
  <tr>
    <th><code>BUILDKITE_TRIGGERED_FROM_BUILD_ID</code></th>
    <td>The UUID of the build that <a href="/docs/pipelines/trigger-step">triggered</a> this build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"5aa7c894-c8c0-435b-bc17-13923b90f163"</code>, or <code>""</code> if the build was not triggered from another build.</td>
  </tr>
  <tr>
    <th><code>BUILDKITE_UNBLOCKER</code></th>
    <td>The name of the user who unblocked the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"Tracy Tester"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_UNBLOCKER_UUID</code></th>
    <td>The UUID of the user who unblocked the build. <p class="Docs__api-param-eg"><em>Example:</em> <code>"4735ba57-80d0-46e2-8fa0-b28223a86586"</code></p></td>
  </tr>
  <tr>
    <th><code>BUILDKITE_UNBLOCKER_TEAMS</code></th>
    <td>A colon separated list of non-private team names that the unblocker belongs to. <p class="Docs__api-param-eg"><em>Example:</em> <code>"everyone:platform"</code></p></td>
  </tr>
  <tr>
    <th><code>CI</code></th>
    <td>Always <code>"true"</code>.</td>
  </tr>
</tbody>
</table>

## Defining your own

You can define environment variables in your jobs in a few ways, depending on the nature of the value being set:

* Pipeline settings — for values that are not secret.
* [Build pipeline configuration](/docs/pipelines/command-step) — for values that are not secret.
* An `environment` or `pre-command` [agent hook](/docs/agent/v3/hooks) — for values that are secret or agent-specific.

## Environment variable precedence

You can set environment variables in lots of different places, and which ones take precedence can get a little confusing.
There are many different levels at which environment variables are merged together. The following walkthrough and examples demonstrate the order in which variables are combined, as if you had set variables in every available place.

When a job runs on an agent, the first combination of environment variables happens in the job itself:

### Job environment

When a job runs on an agent, the first combination of environment variables happens in the job environment itself. This is the environment you can see in a job’s Environment tab in the Buildkite dashboard, and the one returned by the REST and GraphQL APIs.

The job environment is made by merging the following sets of values, in order:

<table>
<tbody>
  <tr>
    <th><em>Standard</em></th>
    <td>The set of variables provided by Buildkite to every job</td>
  </tr>
  <tr>
    <th><em>Build</em></th>
    <td>Optional variables set by you on the build when creating a new build in the UI or via the REST API</td>
  </tr>
  <tr>
    <th><em>Step</em></th>
    <td>Optional variables set by you on a step in the UI or in a pipeline.yml file</td>
  </tr>
  <tr>
    <th><em>Pipeline</em></th>
    <td>Optional variables set by you on a pipeline on the Pipeline Settings page</td>
  </tr>
</tbody>
</table>

For example, if had configured the following environment variables:

<table>
  <tbody>
    <tr>
      <th><em>Build</em></th>
      <td><code>MY_ENV1="a"</code></td>
    </tr>
    <tr>
      <th><em>Step</em></th>
      <td><code>MY_ENV1="b"</code></td>
    </tr>
    <tr>
      <th><em>Pipeline</em></th>
      <td><code>MY_ENV1="c"</code></td>
    </tr>
  </tbody>
</table>

In the final job environment, the value of `MY_ENV` would be `"c"`.

**Setting variables in a pipeline.yml**

There are two places in a pipeline.yml file that you can set environment variables:

  1. In the `env` attribute of command and trigger steps.
  2. At the top of the yaml file, before you define your pipeline's steps.

Defining an environment variable at the top of your yaml file will set that variable on each of the command steps in the pipeline, and is equivalent to setting the `env` attribute on every step.

<div class="Docs__note">
  <p>Top level pipeline environment variables will override what is set in the <code>env</code> attribute of an individual step.</p>
</div>

**Setting variables in a Trigger step**

Environment variables are not automatically passed through to builds created with [trigger steps](/docs/pipelines/trigger-step). To set build-level environment variables on triggered builds, set the trigger step’s `env` attribute.

### Agent environment

Separate to the job's base environment, your `buildkite-agent` process has an environment of its own. This is made up of:

- operating system environment variables
- any variables you set on your agent when you started it
- any environment variables that were inherited from how you started the process (i.e. systemd sets some env vars for you)

For a list of variables and configuration flags you can set on your agent, see the Buildkite Agent’s [start command documentation](/docs/agent/v3/cli-start).

### Job runtime environment

Once the job is accepted by an agent, more environment merging happens. Starting with the environment that we put together in the Job Environment section, we merge in some of the variables from the agent environment.

<div class="Docs__note">
  <p>Not all variables from the agent are available in the job runtime. For example, we remove the agent’s registration token and replace it with a build session token that has limited permissions. This new session token is used when you run the <code>artifact</code>, <code>meta-data</code> and <code>pipeline</code> commands inside the job.</p>
</div>

After the agent variables have been merged, the bootstrap script is run.

The bootstrap runs any local and global <a href="/docs/agent/v3/hooks">hooks</a> that have been defined on the agent machine, and any hooks provided by <a href="/docs/pipelines/plugins">plugins</a>. Variables that are set in these hooks will be merged into the runtime environment, and will override any previous values that are set.

<div class="Docs__troubleshooting-note">
  <h1>Take care with environment variables in hooks</h1>
  <p>Variables that are defined in hooks can override anything that exists in the environment.</p>
</div>

This is the environment your command runs in 🎉

Finally, if your job’s commands make any changes to the environment, those changes will only survive as long as the script is running.
