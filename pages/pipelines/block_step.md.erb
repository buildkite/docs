# Block Step

A *block* step is used to pause the execution of a build and wait on a team member to unblock it using the web or the [API](/docs/apis/rest-api/jobs#unblock-a-job).

A block step is functionally identical to an [input step](/docs/pipelines/input-step), however a block step creates [implicit dependencies](/docs/pipelines/dependencies) to the steps before and after it. Note that explicit dependencies specified by `depends_on` take precedence over implicit dependencies; subsequent steps will run when the step they depend on passes, without waiting for `block` or `wait` steps, unless those are also explicit dependencies.

{:toc}

A block step can be defined in your pipeline settings, or in your [pipeline.yml](/docs/pipelines/defining-steps) file.

Once all steps before the block have completed, the pipeline will pause and wait for a team member to unblock it. Clicking on a block step in the Buildkite web UI opens a dialog box asking if you'd like to continue.

```yml
steps:
  - block: "\:rocket\: Release!"
```
{: codeblock-file="pipeline.yml"}

<%= image "block-step.png", width: 944/2, height: 364/2, alt: "Screenshot of a basic block step" %>

You can add form fields to block steps by adding a `fields` attribute. There are two field types available: text or select. The select input type is displayed as radio buttons when it contains less than six items, and as a drop down list when it contains more than six items. Block steps with input fields can only be defined using a `pipeline.yml`.

<%= image "block-step-with-fields.png", width: 944/2, height: 1178/2, alt: "Screenshot of a block step with input fields" %>

The data you collect from these fields is then available to subsequent steps in the pipeline in the [build meta-data](/docs/pipelines/build-meta-data).

In this example, the `pipeline.yml` defines an input step with the key `release-name`. The Bash script then accesses the value of the step using the [meta-data](/docs/agent/v3/cli-meta-data) command.

```yml
- block: "Release"
  prompt: "Fill out the details for release"
  fields:
    - text: "Release Name"
      key: "release-name"
```
{: codeblock-file="pipeline.yml"}

```bash
RELEASE_NAME=$(buildkite-agent meta-data get release-name)
```
{: codeblock-file="script.sh"}

For a complete example pipeline, including dynamically generated input fields, see the [Block Step ExampleÂ Pipeline](https://github.com/buildkite/block-step-example) on GitHub:

<a class="Docs__example-repo" href="https://github.com/buildkite/block-step-example"><span class="detail">:pipeline: Block Step Example Pipeline</span> <span class="repo">github.com/buildkite/block-step-example</span></a>

## Block step attributes

Input and block steps have the same attributes available for use.

_Optional attributes:_

<table data-attributes>
  <tr>
    <td><code>prompt</code></td>
    <td>
      The instructional message displayed in the dialog box when the unblock step is activated.<br>
      <em>Example:</em> <code>"Release to production?"</code><br>
      <em>Example:</em> <code>"Fill out the details for this release"</code>
    </td>
  </tr>
  <tr>
    <td><code>fields</code></td>
    <td>
      A list of input fields required to be filled out before unblocking the step.<br>
      Available input field types: <code>text</code>, <code>select</code>
    </td>
  </tr>
    <tr>
    <td><code>blocked_state</code></td>
    <td>
      <p>The state that the build is set to when the build is blocked by this block step. The default is passed. When the <code>blocked_state</code> of a block step is set to <code>failed</code>, the step that triggered it will be stuck in the <code>running</code> state until it is manually unblocked.<br>
      <em>Default:</em> <code>passed</code><br>
      <em>Values:</em> <code>passed</code>, <code>failed</code>, <code>running</code></p>
      <p>If you're using GitHub, you can also <a href="/docs/integrations/github#customizing-commit-statuses">configure which GitHub status</a> to use for blocked builds on a per-pipline basis.</p>
    </td>
  </tr>
  <tr>
    <td><code>branches</code></td>
    <td>
      The <a href="/docs/pipelines/branch-configuration#branch-pattern-examples">branch pattern</a> defining which branches will include this block step in their builds.<br>
      <em>Example:</em> <code>"main stable/*"</code>
    </td>
  </tr>
  <tr>
    <td><code>if</code></td>
    <td>
      A boolean expression that omits the step when false. See <a href="/docs/pipelines/conditionals">Using conditionals</a> for supported expressions.<br>
      <em>Example:</em> <code>build.message != "skip me"</code>
    </td>
  </tr>
  <tr>
    <td><code>depends_on</code></td>
    <td>
      A list of step keys that this step depends on. This step will only proceed after the named steps have completed. See <a href="/docs/pipelines/dependencies">managing step dependencies</a> for more information.<br>
      <em>Example:</em> <code>"test-suite"</code>
    </td>
   </tr>
  <tr>
    <td><code>key</code></td>
    <td>
	    A unique string to identify the block step.
      <em>Example:</em> <code>"test-suite"</code>
    </td>
   </tr>
   <tr>
    <td><code>allow_dependency_failure</code></td>
    <td>
      Whether to continue to proceed past this step if any of the steps named in the <code>depends_on</code> attribute fail.<br>
      <em>Default:</em> <code>false</code>
    </td>
  </tr>
</table>

```yml
steps:
  - block: "\:rocket\: Release!"
```
{: codeblock-file="pipeline.yml"}

## Text input attributes

>ðŸ“˜ Line endings
> A text field normalizes line endings to Unix format (<code>\n</code>).

_Required attributes:_

<table>
  <tr>
    <td><code>key</code></td>
    <td>
      The meta-data key that stores the field's input (using the <a href="/docs/agent/v3/cli-meta-data">buildkite-agent meta-data command</a>)<br>
      The key may only contain alphanumeric characters, slashes or dashes.
      <em>Example:</em> <code>"release-name"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - block: "Request Release"
    fields:
      - text: "Code Name"
        key: "release-name"
```
{: codeblock-file="pipeline.yml"}

_Optional attributes:_

<table>
  <tr>
    <td><code>hint</code></td>
    <td>
      The explanatory text that is shown after the label.<br>
      <em>Example:</em> <code>"What's the code name for this release? \:name_badge\:"</code>
    </td>
  </tr>
  <tr>
    <td><code>required</code></td>
    <td>
      A boolean value that defines whether the field is required for form submission.<br>
      <em>Default value:</em> <code>true</code>
    </td>
  </tr>
  <tr>
    <td><code>default</code></td>
    <td>
      The value that is pre-filled in the text field.<br>
      <em>Example:</em> <code>"Flying Dolphin"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - block: "Request Release"
    fields:
      - text: "Code Name"
        key: "release-name"
        hint: "What's the code name for this release? \:name_badge\:"
        required: false
        default: "Release #"
```
{: codeblock-file="pipeline.yml"}

## Select input attributes

_Required attributes:_

<table>
  <tr>
    <td><code>key</code></td>
    <td>
      The meta-data key that stores the field's input (using the <a href="/docs/agent/v3/cli-meta-data">buildkite-agent meta-data command</a>)<br>
      The key may only contain alphanumeric characters, slashes or dashes.
      <em>Example:</em> <code>"release-stream"</code>
    </td>
  </tr>
  <tr>
    <td><code>options</code></td>
    <td>
      The list of select field options.<br>
      For 6 or less options they'll be displayed as radio buttons, otherwise they'll be displayed in a dropdown box.<br>
      If selecting multiple options is permitted the options will be displayed as checkboxes.
    </td>
  </tr>
</table>

Each select option has the following _required attributes:_

<table>
  <tr>
    <td><code>label</code></td>
    <td>
      The text displayed for the option.<br>
      <em>Example:</em> <code>"Stable"</code>
    </td>
  </tr>
  <tr>
    <td><code>value</code></td>
    <td>
      The value to be stored as meta-data (to be later retrieved using the <a href="/docs/agent/v3/cli-meta-data">buildkite-agent meta-data command</a>)<br>
      <em>Example:</em> <code>"stable"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - block: "Request Release"
    fields:
      - select: "Stream"
        key: "release-stream"
        options:
          - label: "Beta"
            value: "beta"
          - label: "Stable"
            value: "stable"
```
{: codeblock-file="pipeline.yml"}

_Optional attributes:_

<table>
  <tr>
    <td><code>hint</code></td>
    <td>
      The text displayed directly under the select field's label.<br>
      <em>Example:</em> <code>"Which release stream does this belong in? \:fork\:"</code>
    </td>
  </tr>
  <tr>
    <td><code>required</code></td>
    <td>
      A boolean value that defines whether the field is required for form submission.<br>
      <em>Default:</em> <code>true</code>
    </td>
  </tr>
  <tr>
    <td><code>multiple</code></td>
    <td>
      A boolean value that defines whether multiple options may be selected.<br>
      When multiple options are selected, they are delimited in the meta-data field by a line break (<code>\n</code>)<br>
      <em>Default:</em> <code>false</code>
    </td>
  </tr>
  <tr>
    <td><code>default</code></td>
    <td>
      The value of the option or options that will be pre-selected.<br>
      When <code>multiple</code> is enabled, this can be an array of values to select by default.<br>
      <em>Example:</em> <code>"beta"</code>
    </td>
  </tr>
</table>

```yml
steps:
  - block: "Request Release"
    fields:
      - select: "Stream"
        key: "release-stream"
        hint: "Which release stream does this belong in? \:fork\:"
        required: false
        default: "beta"
        options:
          - label: "Beta"
            value: "beta"
          - label: "Stable"
            value: "stable"
```
{: codeblock-file="pipeline.yml"}

```yml
steps:
  - block: "Deploy To"
    fields:
      - select: "Regions"
        key: "deploy-regions"
        hint: "Which regions should we deploy this to? \:earth_asia\:"
        multiple: true
        default:
          - "na"
          - "eur"
          - "asia"
          - "aunz"
        options:
          - label: "North America"
            value: "na"
          - label: "Europe"
            value: "eur"
          - label: "Asia"
            value: "asia"
          - label: "Oceania"
            value: "aunz"
```
{: codeblock-file="pipeline.yml"}

## Passing block step data to other steps

Before you can do anything with the values from a block step, you need to store the data using the Buildkite meta-data store.

Use the `key` attribute in your block step to store values from the text or select fields in meta-data:

```yaml
steps:
  - block: "Request Release"
    fields:
      - text: "Code Name"
        key: "release-name"
```
{: codeblock-file="pipeline.yml"}

You can access the stored meta-data after the block step has passed. Use the `buildkite-agent meta-data get` command to retrieve your data:

```shell
buildkite-agent meta-data get "release-name"
```

>ðŸš§
> Meta-data cannot be interpolated directly from the <code>pipeline.yml</code> at runtime. The meta-data store can only be accessed from within a command step.

In the below example, the script uses the `buildkite-agent` meta-data command to retrieve the meta-data and print it to the log:

```bash
#!/bin/bash

RELEASE_NAME="$(buildkite-agent meta-data get "release-name")"
echo "Release name: $RELEASE_NAME"
```

### Passing meta-data to trigger steps

When passing meta-data values to trigger steps you need to delay adding the trigger step to the pipeline until after the block step has completed; this can be done using [dynamic pipelines](/docs/agent/v3/cli-pipeline), and works around the lack of runtime meta-data interpolation.

You can modify a trigger step to dynamically upload itself to a pipeline as follows:

1. Move your trigger step from your `pipeline.yml` file into a script. The below example script is stored in a file named `.buildkite/trigger-deploy.sh`:

```bash
#!/bin/bash

set -euo pipefail

# Set up a variable to hold the meta-data from your block step
RELEASE_NAME="$(buildkite-agent meta-data get "release-name")"

# Create a pipeline with your trigger step
PIPELINE="steps:
  - trigger: \"deploy-pipeline\"
    label: \"Trigger deploy\"
    build:
      meta_data:
        release-name: $RELEASE_NAME
"

# Upload the new pipeline and add it to the current build
echo "$PIPELINE" | buildkite-agent pipeline upload
```

2. Replace the old trigger step in your `pipeline.yml` with a dynamic pipeline upload:

#### Before

The `pipeline.yml` file with the trigger step:

```yaml
steps:
  - block: "\:shipit\:"
    fields:
      - text: "Code Name"
        key: "release-name"
  - trigger: "deploy-pipeline"
    label: "Trigger Deploy"
```
{: codeblock-file="pipeline.yml"}

#### After

The `pipeline.yml` file dynamically uploading the trigger step:

```yaml
steps:
  - block: "\:shipit\:"
    fields:
      - text: "Code Name"
        key: "release-name"
  - command: ".buildkite/trigger-deploy.sh"
    label: "Prepare Deploy Trigger"
```
{: codeblock-file="pipeline.yml"}

The command step added in the above example will upload the trigger step and add it to the end of our pipeline at runtime.

<%= image "block-trigger-pipeline.png", width: 2328/2, height: 952/2, alt: "Screenshot of pipeline showing the uploaded trigger step" %>

In the pipeline you're triggering, you will be able to use the meta-data that you have passed through as if it was set during the triggered build.

## Block steps interacting with wait steps

<%= render_markdown partial: 'pipelines/block_wait' %>
