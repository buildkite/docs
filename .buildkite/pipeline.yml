steps:
  - label: ":rspec: RSpec"
    command: bundle exec rspec
    artifact_paths: "log/rspec-*.xml"
    key: "rspec"
    env:
      RAILS_ENV: test
    plugins:
      - docker-compose#v3.0.0:
          run: app
          env:
            - BUILDKITE_JOB_ID
            - CI
            - RAILS_ENV

  - label: ":junit: Test Summary"
    depends_on: "rspec"
    allow_dependency_failure: true
    plugins:
      - bugcrowd/test-summary#v1.11.0:
          inputs:
            - label: ":rspec: RSpec"
              artifact_path: "log/rspec*"
              type: junit
          formatter:
            type: details
          context: test-summary

  - label: ":lint-roller: Linting"
    commands:
      - wget https://github.com/errata-ai/vale/releases/download/v2.12.1/vale_2.12.1_Linux_64-bit.tar.gz
      - tar --transform='s/vale/vale-bin/'  -xf 'vale_2.12.1_Linux_64-bit.tar.gz'
      - ./vale-bin --config .vale.ini pages
      - ./vale-bin --config .vale.snippets.ini pages/**/_*

  - label: "Find common spelling mistakes"
    commands:
      - pip install codespell
      - ~/.local/bin/codespell -L iterm,iam,keyserver pages

  - label: ":lint-roller: Linting for insensitive words"
    command: npm run lint -y
    plugins:
      # Using the plain Node image, instead of the custom doc Dockerfile
      # version, is way faster because we don't have to wait for Ruby gems to
      # install.
      - docker#v3.7.0:
          # Alpine 3.14 - EOS 01 May 2023
          # lts = Node 1415.1 - 2023-04-30
          image: "node:lts-alpine3.14"

  - label: ":lint-roller: :markdown: Linting the Markdown"
    command: npm run -y mdlint
    plugins:
      - docker#v3.7.0:
          image: "node:lts-alpine3.14"

  - label: ":snake: Linting markdown files for snake case"
    command: npx -y @ls-lint/ls-lint
    plugins:
      - docker#v3.7.0:
          image: "node:lts-alpine3.14"

  - label: "Validate YAML"
    command: npm run validate-yaml
    plugins:
      - docker#v3.7.0:
          image: "node:lts-alpine3.14"
